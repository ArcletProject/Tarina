name: Build

on:
  pull_request:
    types:
      - opened
    paths:
      - 'src/tarina/_op.h'
      - 'src/tarina/*_c.c'
      - 'src/tarina/*_c.pyx'
  release:
    types: [published]
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build_sdist:
    name: Build sdist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Install dependencies
        uses: py-actions/py-dependency-install@v4
        with:
          path: requirements/cython.txt
      - name: Cythonize
        run: |
          make cythonize
      - name: Build sdist
        run: |
          pipx run build --sdist
      - uses: actions/upload-artifact@v4
        with:
          name: pkg-sdist
          path: dist/*.tar.gz

  build_pure_wheel:
    name: Build pure wheel
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Install dependencies
        uses: py-actions/py-dependency-install@v4
        with:
          path: requirements/cython.txt
      - name: Cythonize
        run: |
          make cythonize
      - name: Build wheel
        run: |
          export TARINA_NO_EXTENSIONS=1
          pipx run build --wheel
      - uses: actions/upload-artifact@v4
        with:
          name: pkg-pure-wheel
          path: dist/*.whl

  build_wheels:
    name: Build wheels on ${{ matrix.os }} ${{ matrix.qemu }} ${{ matrix.musl }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm, windows-latest, windows-11-arm, macos-13, macos-14]
        qemu: [ '' ]
        musl: [ "" ]
        include:
          # Split ubuntu/musl jobs for the sake of speed-up
          - os: ubuntu-latest
            qemu: ppc64le
            musl: ""
          - os: ubuntu-latest
            qemu: armv7l
            musl: ""
          - os: ubuntu-latest
            qemu: s390x
            musl: ""
          - os: ubuntu-latest
            qemu: riscv64
            musl: ""
          - os: ubuntu-latest
            qemu: riscv64
            musl: musllinux
          - os: ubuntu-latest
            qemu: s390x
            musl: musllinux
          - os: ubuntu-latest
            qemu: ppc64le
            musl: musllinux
          - os: ubuntu-latest
            qemu: armv7l
            musl: musllinux
          - os: ubuntu-latest
            musl: musllinux
          - os: ubuntu-24.04-arm
            musl: musllinux
    steps:
      - uses: actions/checkout@v5
      - name: Set up QEMU
        if: runner.os == 'Linux' && runner.arch == 'X64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
          image: tonistiigi/binfmt:qemu-v8.1.5
        id: qemu
      - name: Set up Python
        uses: actions/setup-python@v5
      - name: Install cython
        uses: py-actions/py-dependency-install@v4
        with:
          path: requirements/cython.txt
      - name: Cythonize
        run: |
          make cythonize
      - name: Ensure Macos 13
        run: |
          if [[ "${{ matrix.os }}" -eq "macos-13" ]]; then
            echo "CIBW_ARCHS_MACOS=x86_64 universal2" >> $GITHUB_ENV
          else
            echo "CIBW_ARCHS_MACOS=arm64" >> $GITHUB_ENV
          fi
        shell: bash
      - name: Prepare emulation
        run: |
          if [[ -n "${{ matrix.qemu }}" && "${{ runner.arch }}" == "X64" ]]; then
            # Build emulated architectures only if QEMU is set,
            # use default "auto" otherwise
            echo "CIBW_ARCHS_LINUX=${{ matrix.qemu }}" >> $GITHUB_ENV
          else
            echo "CIBW_ARCHS_LINUX=auto" >> $GITHUB_ENV
          fi
        shell: bash
      - name: Build wheels
        uses: pypa/cibuildwheel@v3.2.0
        env:
          CIBW_SKIP: cp313t* cp314t* pp* ${{ matrix.musl == 'musllinux' && '*manylinux*' || '*musllinux*' }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        if: github.event_name != 'pull_request'
        with:
          name: >-
            pkg-wheels-${{ matrix.os }}-${{ strategy.job-index }}-${{ matrix.musl }}-${{
              matrix.qemu
              && matrix.qemu
              || 'native'
            }}
          path: ./wheelhouse/*.whl

  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: [build_sdist, build_pure_wheel, build_wheels]
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v5
      - name: Download artifact
        uses: actions/download-artifact@v5
        with:
          path: dist
          pattern: pkg-*
          merge-multiple: true
      - name: Publish package
        uses: pypa/gh-action-pypi-publish@v1.13.0
        with:
          verbose: true
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
      - name: upload release asset
        run: |
          gh release upload ${{ github.event.release.tag_name }} dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}